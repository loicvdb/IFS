#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, r32ui) uniform uimage2D depthImage;
layout(binding = 1, rgba8) uniform image2D colorImage;
layout(binding = 2) uniform FrameData
{
    mat4 matrices[3];
    mat4 viewProj;
    mat4 inverseViewProj;
    uint iterationCount;
} frameData;

// uses fp units, a bit hacky
#define UINT_POW(x, y) uint(round(pow(float(x), float(y))))

void main()
{
    // each thread splats 27 points, all points share the last N iterations which allows us to
    // do most of the compute 1 time for all 27 points

    // computes the common part of the transform
    vec3 p = vec3(0.0);
    for (uint i = 0u; i < frameData.iterationCount; i++)
    {
        uint m = (gl_GlobalInvocationID.x / UINT_POW(3u, frameData.iterationCount - 1u - i)) % 3u;
        p = (frameData.matrices[m] * vec4(p, 1.0)).xyz;
    }
    
    vec2 resolution = vec2(imageSize(depthImage));
    
    // use this transform to splat 3^3 (27) points
    for (uint i0 = 0u; i0 < 3u; i0++)
    {
        vec3 p0 = (frameData.matrices[i0] * vec4(p, 1.0)).xyz;
        for (uint i1 = 0u; i1 < 3u; i1++)
        {
            vec3 p1 = (frameData.matrices[i1] * vec4(p0, 1.0)).xyz;
            for (uint i2 = 0u; i2 < 3u; i2++)
            {
                vec3 p2 = (frameData.matrices[i2] * vec4(p1, 1.0)).xyz;
                
                vec4 clip = frameData.viewProj * vec4(p2, 1.0);
                
                if (clip.w < 0.0 || clip.x < -clip.w || clip.x > clip.w || clip.y < -clip.w || clip.y > clip.w || clip.z < 0.0 || clip.z > clip.w)
                {
                    continue;
                }
                
                vec3 ndc = clip.xyz / clip.w;
                vec3 frustum = vec3((ndc.xy * 0.5 + 0.5) * resolution, ndc.z);
                
                ivec2 splatPos = ivec2(frustum.xy);
                uint splatDepth = uint(float(0xFFFFFFFFu) * frustum.z);
                
                imageAtomicMin(depthImage, splatPos, splatDepth);
            }
        }
    }
}
