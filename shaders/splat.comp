#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, r32ui) uniform uimage2D depthImage;
layout(binding = 1, rgba8) uniform image2D colorImage;
layout(binding = 2) uniform FrameData
{
    mat4 matrices[3];
    mat4 view;
    vec4 color0;
    vec4 color1;
    float fov;
    float focalPlane;
    float aperture;
    float exposure;
    uint iterationCount;
} frameData;

// uses fp units, a bit hacky
#define UINT_POW(x, y) uint(round(pow(float(x), float(y))))

void main()
{
    // each thread splats 27 points, all points share the last N iterations which allows us to
    // do most of the compute 1 time for all 27 points

    // computes the common part of the transform
    vec3 p = vec3(0.0);
    vec3 c = vec3(0.0);
    for (uint i = 0u; i < frameData.iterationCount; i++)
    {
        uint m = (gl_GlobalInvocationID.x / UINT_POW(3u, frameData.iterationCount - 1u - i)) % 3u;
        p = (frameData.matrices[m] * vec4(p, 1.0)).xyz;
        c += m == 0 ? vec3(1.0, 0.0, 1.0) : m == 1 ? vec3(0.0, 1.0, 1.0) : vec3(0.0, 0.0, 1.0);
    }
    
    ivec2 iresolution = ivec2(imageSize(depthImage));
    vec2 resolution = vec2(imageSize(depthImage));
    
    // use this transform to splat 3^3 (27) points
    for (uint i0 = 0u; i0 < 3u; i0++)
    {
        vec3 p0 = (frameData.matrices[i0] * vec4(p, 1.0)).xyz;
        vec3 c0 = c + (i0 == 0 ? vec3(1.0, 0.0, 1.0) : i0 == 1 ? vec3(0.0, 1.0, 1.0) : vec3(0.0, 0.0, 1.0));
        for (uint i1 = 0u; i1 < 3u; i1++)
        {
            vec3 p1 = (frameData.matrices[i1] * vec4(p0, 1.0)).xyz;
            vec3 c1 = c0 + (i1 == 0 ? vec3(1.0, 0.0, 1.0) : i1 == 1 ? vec3(0.0, 1.0, 1.0) : vec3(0.0, 0.0, 1.0));
            for (uint i2 = 0u; i2 < 3u; i2++)
            {
                vec3 p2 = (frameData.matrices[i2] * vec4(p1, 1.0)).xyz;
                vec3 c2 = c1 + (i2 == 0 ? vec3(1.0, 0.0, 1.0) : i2 == 1 ? vec3(0.0, 1.0, 1.0) : vec3(0.0, 0.0, 1.0));
                
                vec4 clip = frameData.view * vec4(p2, 1.0);
                
                float r = float(0xa265c5cfu * gl_GlobalInvocationID.x) / float(0xFFFFFFFFu);
                float a = float(0x531680cbu * gl_GlobalInvocationID.x) / float(0xFFFFFFFFu) * 2.0 * acos(-1.0);
                vec2 rc = sqrt(r) * vec2(cos(a), sin(a));
                
                float depth = -clip.z;
                vec2 f = (clip.xy + frameData.aperture * rc * abs(depth - frameData.focalPlane)) / (frameData.fov * depth);
                
                ivec2 splatPos = ivec2(0.5 * resolution.y * f + resolution * 0.5);
                
                if (depth < 0.0 || splatPos.x < 0 || splatPos.x >= iresolution.x || splatPos.y < 0 || splatPos.y >= iresolution.y)
                {
                    continue;
                }
                
                // compensate for point/pixel size ratios
                float sr = resolution.y / (frameData.fov * depth);
                
                // squared because 2D
                float sr2 = sr * sr;
                
                vec2 l = frameData.exposure * sr2 * c2.xy / c2.z;
                
                float n = float(0x69f2cf94u * gl_GlobalInvocationID.x) / float(0xFFFFFFFFu);
                
                imageAtomicAdd(depthImage, splatPos, (uint(floor(l.x + n)) << 16) | uint(floor(l.y + n)));
            }
        }
    }
}
