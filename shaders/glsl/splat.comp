#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimage2D depth;
layout(set = 0, binding = 1, rgba8) uniform image2D color;

void main()
{
    vec2 p = vec2(0.0);
    float s = 1.0;
    
    uint idx = gl_GlobalInvocationID.x;
    for (uint i = 0u; i < 16u; i++)
    {
        uint m = idx %3u;
        idx = idx / 3u;
        
        vec2 o = m == 0 ? vec2(0.0, 0.5) : m == 1 ? vec2(-0.5, -0.5) : vec2(0.5, -0.5);
        
        #if 0
        // trashes performance for some reason
        p = o + 0.5 * p;
        #else
        p += s * o;
        s *= 0.5;
        #endif
    }
    
    uvec2 splats[27];
    uint splatCount = 0u;
    
    for (uint i0 = 0u; i0 < 3u; i0++)
    {
        vec2 p0 = p + s * 1.0 * (i0 == 0 ? vec2(0.0, 0.5) : i0 == 1 ? vec2(-0.5, -0.5) : vec2(0.5, -0.5));
        for (uint i1 = 0u; i1 < 3u; i1++)
        {
            vec2 p1 = p0 + s * 0.5 * (i1 == 0 ? vec2(0.0, 0.5) : i1 == 1 ? vec2(-0.5, -0.5) : vec2(0.5, -0.5));
            for (uint i2 = 0u; i2 < 3u; i2++)
            {
                vec2 p2 = p1 + s * 0.25 * (i2 == 0 ? vec2(0.0, 0.5) : i2 == 1 ? vec2(-0.5, -0.5) : vec2(0.5, -0.5));
                ivec2 splatPos = ivec2((p2 * 0.5 + 0.5) * vec2(imageSize(depth)));
                uint splatDepth = gl_GlobalInvocationID.x;
                uvec2 splat = uvec2(uint(splatPos.x) << 16 | uint(splatPos.y), splatDepth);
                uvec2 lastSplat = splats[splatCount - 1];
                if (splatCount > 0 && lastSplat.x == splat.x)
                {
                    // merge
                    splats[splatCount - 1].y = min(splat.y, lastSplat.y);
                }
                else
                {
                    // add
                    splats[splatCount] = splat;
                    splatCount++;
                }
            }
        }
    }
    
    for (uint i = 0; i < splatCount; i++)
    {
        uvec2 splat = splats[i];
        ivec2 pos = ivec2(splat.x >> 16, splat.x & 0xFFFFu);
        imageAtomicMin(depth, pos, splat.y);
    }
}
