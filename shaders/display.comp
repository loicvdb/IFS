#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0, r32ui) uniform uimage2D depthImage;
layout(binding = 1, rgba8) uniform image2D colorImage;
layout(binding = 2) uniform FrameData
{
    mat4 matrices[3];
    mat4 viewProj;
    mat4 inverseViewProj;
    uint iterationCount;
} frameData;

vec3 tonemap(vec3 c)
{
    return (c * (2.51 * c + 0.03)) / (c * (2.43 * c + 0.59) + 0.14);
}

void main()
{
    float depth = float(imageLoad(depthImage, ivec2(gl_GlobalInvocationID.xy)).x) / float(0xFFFFFFFFu);
    
    vec2 resolution = vec2(imageSize(depthImage));
    vec3 frustum = vec3(gl_GlobalInvocationID.xy, depth);
    vec3 ndc = vec3(frustum.xy / resolution * 2.0 - 1.0, frustum.z);
    
    vec4 hp = frameData.inverseViewProj * vec4(ndc, 1.0);
    vec3 p = hp.xyz / hp.w;
    
    vec3 c = (0.3 * p) * 0.5 + 0.5;
    
    imageStore(colorImage, ivec2(gl_GlobalInvocationID.xy), vec4(tonemap(c * (1.0 - depth)), 0.0));
}
